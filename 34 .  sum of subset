#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100

// Function to print subsets with the given sum
void printSubset(int subset[], int size) {
    printf("Subset with the given sum is: { ");
    for (int i = 0; i < size; i++) {
        printf("%d ", subset[i]);
    }
    printf("}\n");
}

// Recursive function to find subsets with the given sum
void findSubset(int arr[], int subset[], int size, int targetSum, int currSum, int index, int *found) {
    if (currSum == targetSum) {
        // If the current sum equals the target sum, print the subset
        printSubset(subset, size);
        *found = 1;
        return;
    }
    if (index == 0 || currSum > targetSum) {
        // If we reach the end of the array or the current sum exceeds the target sum, return
        return;
    }
    // Include the current element in the subset
    subset[size] = arr[index - 1];
    findSubset(arr, subset, size + 1, targetSum, currSum + arr[index - 1], index - 1, found);
    // Exclude the current element from the subset
    findSubset(arr, subset, size, targetSum, currSum, index - 1, found);
}

// Function to solve the subset sum problem
void subsetSum(int arr[], int n, int targetSum) {
    int subset[MAX_SIZE];
    int found = 0;
    findSubset(arr, subset, 0, targetSum, 0, n, &found);
    if (!found) {
        printf("No subset with the given sum found.\n");
    }
}

int main() {
    int arr[] = {1, 3, 5, 7, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int targetSum = 12;

    subsetSum(arr, n, targetSum);

    return 0;
}
