#include <stdio.h>

// Function to add two matrices
void add(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}

// Function to subtract two matrices
void subtract(int n, int A[][n], int B[][n], int C[][n]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}

// Function to perform Strassen's matrix multiplication
void strassen(int n, int A[][n], int B[][n], int C[][n]) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int size = n / 2;
    int A11[size][size], A12[size][size], A21[size][size], A22[size][size];
    int B11[size][size], B12[size][size], B21[size][size], B22[size][size];
    int C11[size][size], C12[size][size], C21[size][size], C22[size][size];
    int P[size][size], Q[size][size], R[size][size], S[size][size], T[size][size], U[size][size], V[size][size];
    int W1[size][size], W2[size][size], W3[size][size], W4[size][size], W5[size][size], W6[size][size], W7[size][size];
    int temp1[size][size], temp2[size][size];

    // Divide matrices A and B into 4 submatrices
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + size];
            A21[i][j] = A[i + size][j];
            A22[i][j] = A[i + size][j + size];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + size];
            B21[i][j] = B[i + size][j];
            B22[i][j] = B[i + size][j + size];
        }
    }

    // Calculate P, Q, R, S, T, U, V
    add(size, A11, A22, temp1);
    add(size, B11, B22, temp2);
    strassen(size, temp1, temp2, P);

    add(size, A21, A22, temp1);
    strassen(size, temp1, B11, Q);

    subtract(size, B12, B22, temp1);
    strassen(size, A11, temp1, R);

    subtract(size, B21, B11, temp1);
    strassen(size, A22, temp1, S);

    add(size, A11, A12, temp1);
    strassen(size, temp1, B22, T);

    subtract(size, A21, A11, temp1);
    add(size, B11, B12, temp2);
    strassen(size, temp1, temp2, U);

    subtract(size, A12, A22, temp1);
    add(size, B21, B22, temp2);
    strassen(size, temp1, temp2, V);

    // Calculate intermediate matrices W1, W2, W3, W4, W5, W6, W7
    add(size, P, S, temp1);
    subtract(size, temp1, T, W1);

    add(size, R, T, W2);

    add(size, Q, S, W3);

    add(size, P, R, temp1);
    subtract(size, temp1, Q, W4);

    add(size, P, U, temp1);
    add(size, temp1, V, temp2);
    subtract(size, temp2, T, W5);

    add(size, S, V, temp1);
    subtract(size, temp1, R, W6);

    add(size, Q, U, temp1);
    subtract(size, temp1, P, temp2);
    add(size, temp2, R, temp1);
    add(size, temp1, S, W7);

    // Calculate matrices C11, C12, C21, C22
    add(size, W1, W2, temp1);
    add(size, temp1, W4, C11);
    subtract(size, W7, W5, C12);

    add(size, W3, W5, C21);

    add(size, W2, W6, temp1);
    add(size, temp1, W7, C22);

    // Combine submatrices into the result matrix C
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = C11[i][j];
            C[i][j + size] = C12[i][j];
            C[i + size][j] = C21[i][j];
            C[i + size][j + size] = C22[i][j];
        }
    }
}

// Function to print a matrix
void printMatrix(int n, int mat[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", mat[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n;
    printf("Enter the size of matrices: ");
    scanf("%d", &n);

    int A[n][n], B[n][n], C[n][n];

    printf("Enter elements of matrix A:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    printf("Enter elements of matrix B:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &B[i][j]);
        }
    }

    // Perform Strassen's matrix multiplication
    strassen(n, A, B, C);

    printf("Resultant matrix C:\n");
    printMatrix(n, C);

    return 0;
}
